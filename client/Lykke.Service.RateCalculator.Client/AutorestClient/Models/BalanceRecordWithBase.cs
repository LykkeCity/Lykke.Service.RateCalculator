// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.RateCalculator.Client.AutorestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class BalanceRecordWithBase
    {
        /// <summary>
        /// Initializes a new instance of the BalanceRecordWithBase class.
        /// </summary>
        public BalanceRecordWithBase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BalanceRecordWithBase class.
        /// </summary>
        public BalanceRecordWithBase(string assetId, double balance, string baseAssetId, double amountInBase)
        {
            AssetId = assetId;
            Balance = balance;
            BaseAssetId = baseAssetId;
            AmountInBase = amountInBase;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AssetId")]
        public string AssetId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Balance")]
        public double Balance { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BaseAssetId")]
        public string BaseAssetId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AmountInBase")]
        public double AmountInBase { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AssetId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AssetId");
            }
            if (BaseAssetId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BaseAssetId");
            }
        }
    }
}
