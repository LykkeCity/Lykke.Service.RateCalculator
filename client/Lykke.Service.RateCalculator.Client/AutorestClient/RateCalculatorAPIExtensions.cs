// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.RateCalculator.Client.AutorestClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RateCalculatorAPI.
    /// </summary>
    public static partial class RateCalculatorAPIExtensions
    {
            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IRateCalculatorAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IRateCalculatorAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='price'>
            /// </param>
            /// <param name='assetPair'>
            /// </param>
            public static double? ApiRateCalculatorGetRateByAssetIdByPricePost(this IRateCalculatorAPI operations, string assetId, double price, AssetPair assetPair = default(AssetPair))
            {
                return operations.ApiRateCalculatorGetRateByAssetIdByPricePostAsync(assetId, price, assetPair).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetId'>
            /// </param>
            /// <param name='price'>
            /// </param>
            /// <param name='assetPair'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<double?> ApiRateCalculatorGetRateByAssetIdByPricePostAsync(this IRateCalculatorAPI operations, string assetId, double price, AssetPair assetPair = default(AssetPair), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRateCalculatorGetRateByAssetIdByPricePostWithHttpMessagesAsync(assetId, price, assetPair, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetFrom'>
            /// </param>
            /// <param name='assetTo'>
            /// </param>
            /// <param name='amount'>
            /// </param>
            public static double? ApiRateCalculatorGetAmountInBaseByAssetFromByAssetToByAmountPost(this IRateCalculatorAPI operations, string assetFrom, string assetTo, double amount)
            {
                return operations.ApiRateCalculatorGetAmountInBaseByAssetFromByAssetToByAmountPostAsync(assetFrom, assetTo, amount).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetFrom'>
            /// </param>
            /// <param name='assetTo'>
            /// </param>
            /// <param name='amount'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<double?> ApiRateCalculatorGetAmountInBaseByAssetFromByAssetToByAmountPostAsync(this IRateCalculatorAPI operations, string assetFrom, string assetTo, double amount, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRateCalculatorGetAmountInBaseByAssetFromByAssetToByAmountPostWithHttpMessagesAsync(assetFrom, assetTo, amount, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetFrom'>
            /// </param>
            /// <param name='assetTo'>
            /// </param>
            /// <param name='amount'>
            /// </param>
            /// <param name='marketProfile'>
            /// </param>
            public static double? ApiRateCalculatorGetAmountInBaseWithProfileByAssetFromByAssetToByAmountPost(this IRateCalculatorAPI operations, string assetFrom, string assetTo, double amount, MarketProfile marketProfile = default(MarketProfile))
            {
                return operations.ApiRateCalculatorGetAmountInBaseWithProfileByAssetFromByAssetToByAmountPostAsync(assetFrom, assetTo, amount, marketProfile).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetFrom'>
            /// </param>
            /// <param name='assetTo'>
            /// </param>
            /// <param name='amount'>
            /// </param>
            /// <param name='marketProfile'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<double?> ApiRateCalculatorGetAmountInBaseWithProfileByAssetFromByAssetToByAmountPostAsync(this IRateCalculatorAPI operations, string assetFrom, string assetTo, double amount, MarketProfile marketProfile = default(MarketProfile), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRateCalculatorGetAmountInBaseWithProfileByAssetFromByAssetToByAmountPostWithHttpMessagesAsync(assetFrom, assetTo, amount, marketProfile, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='toAssetId'>
            /// </param>
            /// <param name='balanceRecords'>
            /// </param>
            public static IList<BalanceRecord> ApiRateCalculatorGetAmountInBaseListByToAssetIdPost(this IRateCalculatorAPI operations, string toAssetId, IList<BalanceRecord> balanceRecords = default(IList<BalanceRecord>))
            {
                return operations.ApiRateCalculatorGetAmountInBaseListByToAssetIdPostAsync(toAssetId, balanceRecords).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='toAssetId'>
            /// </param>
            /// <param name='balanceRecords'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BalanceRecord>> ApiRateCalculatorGetAmountInBaseListByToAssetIdPostAsync(this IRateCalculatorAPI operations, string toAssetId, IList<BalanceRecord> balanceRecords = default(IList<BalanceRecord>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRateCalculatorGetAmountInBaseListByToAssetIdPostWithHttpMessagesAsync(toAssetId, balanceRecords, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='baseAssetId'>
            /// </param>
            /// <param name='balanceRecord'>
            /// </param>
            public static BalanceRecordWithBase ApiRateCalculatorFillBaseAssetDataByBaseAssetIdPost(this IRateCalculatorAPI operations, string baseAssetId, BalanceRecord balanceRecord = default(BalanceRecord))
            {
                return operations.ApiRateCalculatorFillBaseAssetDataByBaseAssetIdPostAsync(baseAssetId, balanceRecord).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='baseAssetId'>
            /// </param>
            /// <param name='balanceRecord'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BalanceRecordWithBase> ApiRateCalculatorFillBaseAssetDataByBaseAssetIdPostAsync(this IRateCalculatorAPI operations, string baseAssetId, BalanceRecord balanceRecord = default(BalanceRecord), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRateCalculatorFillBaseAssetDataByBaseAssetIdPostWithHttpMessagesAsync(baseAssetId, balanceRecord, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='baseAssetId'>
            /// </param>
            /// <param name='balanceRecords'>
            /// </param>
            public static IList<BalanceRecordWithBase> ApiRateCalculatorFillBaseAssetDataListByBaseAssetIdPost(this IRateCalculatorAPI operations, string baseAssetId, IList<BalanceRecord> balanceRecords = default(IList<BalanceRecord>))
            {
                return operations.ApiRateCalculatorFillBaseAssetDataListByBaseAssetIdPostAsync(baseAssetId, balanceRecords).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='baseAssetId'>
            /// </param>
            /// <param name='balanceRecords'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BalanceRecordWithBase>> ApiRateCalculatorFillBaseAssetDataListByBaseAssetIdPostAsync(this IRateCalculatorAPI operations, string baseAssetId, IList<BalanceRecord> balanceRecords = default(IList<BalanceRecord>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRateCalculatorFillBaseAssetDataListByBaseAssetIdPostWithHttpMessagesAsync(baseAssetId, balanceRecords, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetIdTo'>
            /// </param>
            /// <param name='orderAction'>
            /// Possible values include: 'Buy', 'Sell'
            /// </param>
            /// <param name='assetsFrom'>
            /// </param>
            public static IList<ConversionResult> ApiRateCalculatorGetMarketAmountInBaseByAssetIdToByOrderActionPost(this IRateCalculatorAPI operations, string assetIdTo, OrderAction orderAction, IList<AssetWithAmount> assetsFrom = default(IList<AssetWithAmount>))
            {
                return operations.ApiRateCalculatorGetMarketAmountInBaseByAssetIdToByOrderActionPostAsync(assetIdTo, orderAction, assetsFrom).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetIdTo'>
            /// </param>
            /// <param name='orderAction'>
            /// Possible values include: 'Buy', 'Sell'
            /// </param>
            /// <param name='assetsFrom'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ConversionResult>> ApiRateCalculatorGetMarketAmountInBaseByAssetIdToByOrderActionPostAsync(this IRateCalculatorAPI operations, string assetIdTo, OrderAction orderAction, IList<AssetWithAmount> assetsFrom = default(IList<AssetWithAmount>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRateCalculatorGetMarketAmountInBaseByAssetIdToByOrderActionPostWithHttpMessagesAsync(assetIdTo, orderAction, assetsFrom, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MarketProfile ApiRateCalculatorGetMarketProfileGet(this IRateCalculatorAPI operations)
            {
                return operations.ApiRateCalculatorGetMarketProfileGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MarketProfile> ApiRateCalculatorGetMarketProfileGetAsync(this IRateCalculatorAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRateCalculatorGetMarketProfileGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPair'>
            /// </param>
            /// <param name='isBuy'>
            /// </param>
            public static double? ApiRateCalculatorGetBestPriceByAssetPairByIsBuyGet(this IRateCalculatorAPI operations, string assetPair, bool isBuy)
            {
                return operations.ApiRateCalculatorGetBestPriceByAssetPairByIsBuyGetAsync(assetPair, isBuy).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='assetPair'>
            /// </param>
            /// <param name='isBuy'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<double?> ApiRateCalculatorGetBestPriceByAssetPairByIsBuyGetAsync(this IRateCalculatorAPI operations, string assetPair, bool isBuy, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRateCalculatorGetBestPriceByAssetPairByIsBuyGetWithHttpMessagesAsync(assetPair, isBuy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='baseAssetId'>
            /// </param>
            /// <param name='assetIds'>
            /// </param>
            public static IList<AssetConversionRate> ApiRateCalculatorGetConversionRatesForAssetsByBaseAssetIdPost(this IRateCalculatorAPI operations, string baseAssetId, IList<AssetRequest> assetIds = default(IList<AssetRequest>))
            {
                return operations.ApiRateCalculatorGetConversionRatesForAssetsByBaseAssetIdPostAsync(baseAssetId, assetIds).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='baseAssetId'>
            /// </param>
            /// <param name='assetIds'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AssetConversionRate>> ApiRateCalculatorGetConversionRatesForAssetsByBaseAssetIdPostAsync(this IRateCalculatorAPI operations, string baseAssetId, IList<AssetRequest> assetIds = default(IList<AssetRequest>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRateCalculatorGetConversionRatesForAssetsByBaseAssetIdPostWithHttpMessagesAsync(baseAssetId, assetIds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
